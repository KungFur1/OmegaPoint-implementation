{
  "openapi": "3.0.1",
  "info": {
    "title": "Cinematic PoS API",
    "description": "API contract for the PoS System",
    "version": "v1"
  },
  "paths": {
    "/cinematic/company": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "List all companies",
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a company. This is how the administrator of the PoS system (super-manager) initially onboards a new company.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/company/{companyId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a specific company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Edit a company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "Delete a company. This should have a cascading effect on all of the resources under the deleted company.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "List all items",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "descending",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create a item",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/items/{itemId}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get a specific item",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Edit a item",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete a item",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/items/{itemId}/discounts": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create an item discount",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemDiscount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/itemOptions": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "List all item options",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ItemOption"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create an item option",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemOptionInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemOption"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/itemOptions/{itemOptionId}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get an item option",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemOptionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemOption"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Edit an item option",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemOptionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemOptionInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemOption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an item option",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemOptionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/inventory": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "List all inventories with a possibility to filter based on the item or the store",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "store",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Inventory"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create an inventory. When a store wants to sell some item, it must create an inventory (for that store/item pair).",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryCreationInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/inventory/{inventoryId}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get a specific inventory",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inventoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Edit an inventory",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inventoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an inventory",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inventoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List all orders",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "descending",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create an order. This should also create ItemOrders for each of the specified item in the request",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a specific order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update an order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete an order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/orders/{orderId}/status": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update the status of an order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/orders/{orderId}/discounts": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create an order discount",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDiscount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/orders/{orderId}/assign": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Assign an employee to an order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/orders/{orderId}/orderItems/{itemOrderId}": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add an additional item order to a specific order. This might be needed if a user wants to add something that they didn't think of when requesting the order initially",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemOrderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete an item order belonging to a specific order. This might be needed if a user changes up their mind and no longer wants this item order as part of their order.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemOrderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/itemOrders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get item orders with a possibility to retrieve only the ones without any worker assigned.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemOrderId",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlyWithoutWorkers",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ItemOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/itemOrders/{itemOrderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a specific item order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemOrderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemOrder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/itemOrders/{itemOrderId}/status": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update the status of a specific item order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemOrderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemOrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemOrder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/itemOrders/{itemOrderId}/assign": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Assign a worker a specific item order",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemOrderId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Accept a payment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/payments/{paymentId}/receipts": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Fetch a receipt for a payment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Receipt"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/payments/{paymentId}/refunds": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Process a refund for a payment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/payments/{paymentId}/void": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Void a payment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/services": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "List all services",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create a service",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/services/{serviceId}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get a specific service",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Services"
        ],
        "summary": "Edit a service",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "summary": "Delete a service",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/services/{serviceId}/discounts": {
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create a service discount",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDiscount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/appointments": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "List all appointments with a possibility to show all appointments for a certain day",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Appointment"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create an appointment. This is done by a manager/employee to create a \"time slot\" for a specific service.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get a specific appointment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Services"
        ],
        "summary": "Edit an appointment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "summary": "Delete an appointment",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/stores": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "List all stores",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Create a store",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/stores/{storeId}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a specific store",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Edit a store",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Stores"
        ],
        "summary": "Delete a store",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List all users",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a specific user",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Edit a user",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove a user",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/users/signIn": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sign in a user",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/cinematic/{companyId}/users/{userId}/loyalty": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve available loyalty points",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's loyalty points",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/loyalty": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List all loyalty offers",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoyaltyOffer"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new loyalty offer",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyOffer"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/loyalty/{offerId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a specific loyalty offer",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyOffer"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a loyalty offer",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyOffer"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a loyalty offer",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/loyalty/{offerId}/redeem": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Redeem a loyalty offer",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request"
          },
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/role": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List all roles",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a role",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/cinematic/{companyId}/role/{roleId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a specific role",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Edit a role",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a role",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": { }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Appointment": {
        "required": [
          "endDate",
          "id",
          "serviceId",
          "startDate",
          "storeId",
          "workerId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int32",
            "example": 43
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "example": 18
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "workerId": {
            "type": "integer",
            "description": "Specifies the worker that will be fulfilling this appointment, e. g. masseuse, barber",
            "format": "int32",
            "example": 233
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 33
          },
          "orderId": {
            "type": "integer",
            "description": "If there is no OrderId specified, this appointment (time slot) should be considered unoccupied",
            "format": "int32",
            "nullable": true,
            "example": 1024
          }
        },
        "additionalProperties": false,
        "description": "Acts as a time slot for a specific service."
      },
      "AppointmentInformation": {
        "required": [
          "endDate",
          "serviceId",
          "startDate",
          "storeId",
          "workerId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "format": "int32",
            "example": 43
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "example": 18
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "workerId": {
            "type": "integer",
            "description": "Specifies the worker that will be fulfilling this appointment, e. g. masseuse, barber",
            "format": "int32",
            "example": 233
          }
        },
        "additionalProperties": false
      },
      "Company": {
        "required": [
          "email",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "SavorGroup International, Inc."
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email",
            "example": "info@savorgroup.com"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 3
          }
        },
        "additionalProperties": false,
        "description": "Represents a legal entity that has made a deal with the PoS system and has been onboarded to the PoS system"
      },
      "CompanyInformation": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "SavorGroup International, Inc."
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email",
            "example": "info@savorgroup.com"
          }
        },
        "additionalProperties": false
      },
      "Inventory": {
        "required": [
          "amount",
          "id",
          "itemId",
          "lowStockThreshold",
          "storeId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "example": 78
          },
          "lowStockThreshold": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "itemId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "example": 18
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 684
          }
        },
        "additionalProperties": false,
        "description": "Represents the physical amount of a specific item in a specific store"
      },
      "InventoryCreationInformation": {
        "required": [
          "amount",
          "itemId",
          "lowStockThreshold",
          "storeId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "example": 78
          },
          "lowStockThreshold": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "itemId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "example": 18
          }
        },
        "additionalProperties": false
      },
      "InventoryInformation": {
        "required": [
          "amount",
          "lowStockThreshold"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "example": 78
          },
          "lowStockThreshold": {
            "type": "integer",
            "format": "int32",
            "example": 15
          }
        },
        "additionalProperties": false
      },
      "Item": {
        "required": [
          "description",
          "id",
          "name",
          "price",
          "tax"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Super delicious hot dog"
          },
          "price": {
            "type": "number",
            "format": "currency",
            "example": 3.99
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "example": "Savor the symphony of flavors with our Super Delicious Hot Dog – a perfect union of grilled, premium sausage, golden toasted bun, and a medley of condiments. Elevate your hot dog experience with our signature toppings, from melted cheese to crispy bacon, creating a culinary masterpiece that promises to delight your taste buds on every bite."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "tax": {
            "type": "number",
            "format": "currency",
            "example": 0.84
          }
        },
        "additionalProperties": false
      },
      "ItemDiscount": {
        "required": [
          "discountPercentage",
          "itemId"
        ],
        "type": "object",
        "properties": {
          "discountPercentage": {
            "type": "number",
            "format": "double",
            "example": 20
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-11-22T21:06:40.6855801+00:00"
          },
          "conditions": {
            "type": "string",
            "nullable": true,
            "example": "Minimum purchase of $10"
          },
          "itemId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          }
        },
        "additionalProperties": false,
        "description": "Holds the discount information directly linked to item"
      },
      "ItemInformation": {
        "required": [
          "description",
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Super delicious hot dog"
          },
          "price": {
            "type": "number",
            "format": "currency",
            "example": 3.99
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "example": "Savor the symphony of flavors with our Super Delicious Hot Dog – a perfect union of grilled, premium sausage, golden toasted bun, and a medley of condiments. Elevate your hot dog experience with our signature toppings, from melted cheese to crispy bacon, creating a culinary masterpiece that promises to delight your taste buds on every bite."
          }
        },
        "additionalProperties": false
      },
      "ItemOption": {
        "required": [
          "id",
          "itemId",
          "name",
          "price",
          "tax"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "minLength": 1,
            "type": "string",
            "example": "15"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Extra onions"
          },
          "price": {
            "type": "number",
            "format": "currency",
            "example": 0.5
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 63
          },
          "tax": {
            "type": "number",
            "format": "currency",
            "example": 0.1
          }
        },
        "additionalProperties": false,
        "description": "Specifies an \"extra\" that you can add on to an item"
      },
      "ItemOptionInformation": {
        "required": [
          "itemId",
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "minLength": 1,
            "type": "string",
            "example": "15"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Extra onions"
          },
          "price": {
            "type": "number",
            "format": "currency",
            "example": 0.5
          }
        },
        "additionalProperties": false
      },
      "ItemOrder": {
        "required": [
          "id",
          "itemId",
          "status",
          "storeId"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "example": 18
          },
          "itemOptions": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "example": [
              63
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 46434
          },
          "status": {
            "$ref": "#/components/schemas/ItemOrderStatus"
          },
          "workerId": {
            "type": "integer",
            "description": "Specifies the employee that takes care of this particular ItemOrder, e.g. a chef",
            "format": "int32",
            "nullable": true,
            "example": 72
          }
        },
        "additionalProperties": false
      },
      "ItemOrderInformation": {
        "required": [
          "itemId",
          "storeId"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "example": 18
          },
          "itemOptions": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "example": [
              63
            ]
          }
        },
        "additionalProperties": false
      },
      "ItemOrderStatus": {
        "enum": [
          "Placed",
          "Preparing",
          "Done",
          "Delivered"
        ],
        "type": "string"
      },
      "LoyaltyOffer": {
        "required": [
          "description",
          "offerId",
          "pointsRequired",
          "validUntil"
        ],
        "type": "object",
        "properties": {
          "offerId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "example": "A free baguette"
          },
          "pointsRequired": {
            "type": "integer",
            "format": "int32",
            "example": 550
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "example": "2023-11-22T21:06:40.6855801+00:00"
          }
        },
        "additionalProperties": false,
        "description": "Holds the information on offers for loyalty programme"
      },
      "Order": {
        "required": [
          "appointments",
          "customerId",
          "gratuity",
          "id",
          "itemOrders",
          "orderDate",
          "paymentMethodId",
          "status",
          "tax",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "gratuity": {
            "type": "number",
            "description": "How much the user is willing to leave as a tip",
            "format": "currency",
            "example": 1.5
          },
          "appointments": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of appointment IDs",
            "example": [
              33
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 1024
          },
          "workerId": {
            "type": "integer",
            "description": "Specifies the employee that administers the Order",
            "format": "int32",
            "nullable": true,
            "example": 233
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "example": 84354
          },
          "itemOrders": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Specifies the ItemOrders of this Order",
            "example": [
              46434
            ]
          },
          "totalAmount": {
            "type": "number",
            "description": "This value is derived from the prices of Items and Appointments",
            "format": "currency",
            "example": 14.58
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "tax": {
            "type": "number",
            "description": "This value is summed up from the taxes of Items and Appointments",
            "format": "currency",
            "example": 3.45
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          }
        },
        "additionalProperties": false,
        "description": "Models an existing Order (one that has already been requested)"
      },
      "OrderDiscount": {
        "required": [
          "discountPercentage",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "discountPercentage": {
            "type": "number",
            "format": "double",
            "example": 20
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-11-22T21:06:40.6855801+00:00"
          },
          "conditions": {
            "type": "string",
            "nullable": true,
            "example": "Minimum purchase of $10"
          },
          "orderId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          }
        },
        "additionalProperties": false,
        "description": "Holds the discount information directly linked to order"
      },
      "OrderInformation": {
        "required": [
          "appointments",
          "gratuity",
          "paymentMethodId"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "gratuity": {
            "type": "number",
            "description": "How much the user is willing to leave as a tip",
            "format": "currency",
            "example": 1.5
          },
          "appointments": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of appointment IDs",
            "example": [
              33
            ]
          }
        },
        "additionalProperties": false,
        "description": "Specifies generic order information"
      },
      "OrderRequest": {
        "required": [
          "appointments",
          "gratuity",
          "items",
          "paymentMethodId"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "gratuity": {
            "type": "number",
            "description": "How much the user is willing to leave as a tip",
            "format": "currency",
            "example": 1.5
          },
          "appointments": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of appointment IDs",
            "example": [
              33
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemOrderInformation"
            },
            "description": "ItemOrders for this Order should be generated from these items"
          }
        },
        "additionalProperties": false,
        "description": "Alongside generic order information, also specifies items that should be included in the order when creating it"
      },
      "OrderStatus": {
        "enum": [
          "Placed",
          "Pending",
          "Done"
        ],
        "type": "string"
      },
      "Payment": {
        "required": [
          "amount",
          "orderID",
          "paymentDate",
          "paymentId",
          "paymentMethod",
          "status"
        ],
        "type": "object",
        "properties": {
          "orderID": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "amount": {
            "type": "number",
            "format": "currency",
            "example": 15.55
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "paymentId": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-11-21T18:06:40.6433801+00:00"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          }
        },
        "additionalProperties": false
      },
      "PaymentInformation": {
        "required": [
          "amount",
          "orderID",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "orderID": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "amount": {
            "type": "number",
            "format": "currency",
            "example": 15.55
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethod": {
        "enum": [
          "Cash",
          "CreditCard",
          "GiftCard"
        ],
        "type": "string"
      },
      "PaymentStatus": {
        "enum": [
          "Completed",
          "Failed",
          "Pending"
        ],
        "type": "string"
      },
      "Permissions": {
        "enum": [
          "UsersRead",
          "UsersManage",
          "RolesRead",
          "RolesManage",
          "LoyaltyRead",
          "LoyaltyManage",
          "OrdersRead",
          "OrdersManage",
          "ServicesRead",
          "ServicesManage",
          "ItemsRead",
          "ItemsManage",
          "InventoryRead",
          "InventoryManage",
          "PaymentsRead",
          "PaymentsManage",
          "StoresRead",
          "StoresManage"
        ],
        "type": "string"
      },
      "Receipt": {
        "required": [
          "dateIssued",
          "receiptId",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "receiptId": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "dateIssued": {
            "type": "string",
            "format": "date-time",
            "example": "2023-11-21T18:06:40.6433801+00:00"
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "totalAmount": {
            "type": "number",
            "format": "currency",
            "example": 21.47
          }
        },
        "additionalProperties": false
      },
      "Refund": {
        "required": [
          "paymentId",
          "refundDate",
          "refundId"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "paymentId": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "refundDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-11-21T18:06:40.6433801+00:00"
          },
          "refundAmount": {
            "type": "number",
            "format": "currency",
            "example": 12
          },
          "reason": {
            "type": "string",
            "nullable": true,
            "example": "Bland food"
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "required": [
          "id",
          "name",
          "permissions"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Manager"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            },
            "example": [
              "UsersRead",
              "UsersManage",
              "InventoryRead",
              "InventoryManage",
              "ServicesRead",
              "ServicesManage",
              "ItemsRead",
              "ItemsManage",
              "PaymentsRead",
              "PaymentsManage"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        },
        "additionalProperties": false
      },
      "RoleInformation": {
        "required": [
          "name",
          "permissions"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Manager"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            },
            "example": [
              "UsersRead",
              "UsersManage",
              "InventoryRead",
              "InventoryManage",
              "ServicesRead",
              "ServicesManage",
              "ItemsRead",
              "ItemsManage",
              "PaymentsRead",
              "PaymentsManage"
            ]
          }
        },
        "additionalProperties": false
      },
      "Service": {
        "required": [
          "description",
          "id",
          "name",
          "price",
          "tax"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Children (up to 14) haircut"
          },
          "price": {
            "type": "number",
            "format": "currency",
            "example": 3.99
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "example": "Our skilled stylists create a welcoming atmosphere, ensuring a comfortable and enjoyable grooming session. With attention to detail and a playful touch, we craft trendy and age-appropriate hairstyles, making every visit a delightful adventure for your child."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 43
          },
          "tax": {
            "type": "number",
            "format": "currency",
            "example": 0.84
          }
        },
        "additionalProperties": false
      },
      "ServiceDiscount": {
        "required": [
          "discountPercentage",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "discountPercentage": {
            "type": "number",
            "format": "double",
            "example": 20
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-11-22T21:06:40.6855801+00:00"
          },
          "conditions": {
            "type": "string",
            "nullable": true,
            "example": "Minimum purchase of $10"
          },
          "serviceId": {
            "type": "integer",
            "format": "int32",
            "example": 15
          }
        },
        "additionalProperties": false,
        "description": "Holds the discount information directly linked to service"
      },
      "ServiceInformation": {
        "required": [
          "description",
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Children (up to 14) haircut"
          },
          "price": {
            "type": "number",
            "format": "currency",
            "example": 3.99
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "example": "Our skilled stylists create a welcoming atmosphere, ensuring a comfortable and enjoyable grooming session. With attention to detail and a playful touch, we craft trendy and age-appropriate hairstyles, making every visit a delightful adventure for your child."
          }
        },
        "additionalProperties": false
      },
      "SignInResponse": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string",
            "description": "JWT token (base64 encoded string). Alongside information about the user (name, email, id), it should also contain their roles.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        },
        "additionalProperties": false
      },
      "Store": {
        "required": [
          "address",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Mingle In Flavor"
          },
          "address": {
            "minLength": 1,
            "type": "string",
            "example": "Didlauko g. 47, Vilnius"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 18
          }
        },
        "additionalProperties": false,
        "description": "Represents a physical store location"
      },
      "StoreInformation": {
        "required": [
          "address",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "example": "Mingle In Flavor"
          },
          "address": {
            "minLength": 1,
            "type": "string",
            "example": "Didlauko g. 47, Vilnius"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "required": [
          "address",
          "createTime",
          "email",
          "firstName",
          "id",
          "lastName",
          "loyaltyPoints",
          "password",
          "phone",
          "roles"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email",
            "example": "john.d@gmail.com"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "example": "superStrongPassword123"
          },
          "firstName": {
            "minLength": 1,
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "minLength": 1,
            "type": "string",
            "example": "Doe"
          },
          "phone": {
            "minLength": 1,
            "type": "string",
            "format": "tel",
            "example": "+37061234432"
          },
          "address": {
            "minLength": 1,
            "type": "string",
            "example": "Verkiu g. 1, Vilnius"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "example": [
              4
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 42
          },
          "createTime": {
            "type": "string",
            "format": "date-time"
          },
          "loyaltyPoints": {
            "type": "integer",
            "format": "int32",
            "example": 255
          }
        },
        "additionalProperties": false
      },
      "UserInformation": {
        "required": [
          "address",
          "email",
          "firstName",
          "lastName",
          "password",
          "phone",
          "roles"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email",
            "example": "john.d@gmail.com"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "example": "superStrongPassword123"
          },
          "firstName": {
            "minLength": 1,
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "minLength": 1,
            "type": "string",
            "example": "Doe"
          },
          "phone": {
            "minLength": 1,
            "type": "string",
            "format": "tel",
            "example": "+37061234432"
          },
          "address": {
            "minLength": 1,
            "type": "string",
            "example": "Verkiu g. 1, Vilnius"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "example": [
              4
            ]
          }
        },
        "additionalProperties": false
      },
      "UserLoginInformation": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email",
            "example": "john.d@gmail.com"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "example": "superStrongPassword123"
          }
        },
        "additionalProperties": false,
        "description": "Used to log in the user to gain a token"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Please insert JWT with Bearer into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}